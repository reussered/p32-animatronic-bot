#ifndef GENERIC_MIC_DRIVER_HPP
#define GENERIC_MIC_DRIVER_HPP

/**
 * @file generic_mic_driver.hpp
 * @brief Generic microphone driver for analog microphones using ADC bus
 * @author Auto-generated from JSON specification
 */

#include "esp_err.h"

/**
 * @brief Initialize generic_mic_driver component
 * @return ESP_OK on success, esp_err_t error code on failure
 */
esp_err_t generic_mic_driver_init(void);

/**
 * @brief Execute generic_mic_driver component logic
 */
void generic_mic_driver_act(void);

/**
 * @brief Read a raw sample from the microphone
 * @param sample Pointer to store the raw ADC sample
 * @return ESP_OK on success, esp_err_t error code on failure
 */
esp_err_t generic_mic_driver_read_sample(int *sample);

/**
 * @brief Get the microphone voltage in millivolts
 * @param voltage_mv Pointer to store the voltage in millivolts
 * @return ESP_OK on success, esp_err_t error code on failure
 */
esp_err_t generic_mic_driver_get_voltage(int *voltage_mv);

/**
 * @brief Set the microphone gain amplification
 * @param gain Gain factor (1.0 = no amplification)
 * @return ESP_OK on success, esp_err_t error code on failure
 */
esp_err_t generic_mic_driver_set_gain(float gain);

/**
 * @brief Enable or disable noise gate
 * @param enable True to enable noise gate, false to disable
 * @return ESP_OK on success, esp_err_t error code on failure
 */
esp_err_t generic_mic_driver_enable_noise_gate(bool enable);

/**
 * @brief Set the noise gate threshold
 * @param threshold Threshold value for noise gate
 * @return ESP_OK on success, esp_err_t error code on failure
 */
esp_err_t generic_mic_driver_set_threshold(int threshold);

#endif // GENERIC_MIC_DRIVER_HPP