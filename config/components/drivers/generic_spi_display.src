// generic_spi_display component implementation
// Generic SPI display interface for basic drawing operations

#include "esp_log.h"
#include "driver/spi_master.h"

static const char *TAG_generic_spi_display = "generic_spi_display";

// External references to SPI devices (defined in gc9a01.src)
extern spi_device_handle_t spi_left;
extern spi_device_handle_t spi_right;

// SPI transaction functions
static void spi_write_command(spi_device_handle_t spi, uint8_t cmd) {
    esp_err_t ret;
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 8;
    t.tx_buffer = &cmd;
    t.user = (void*)0;  // D/C = 0 for command
    ret = spi_device_polling_transmit(spi, &t);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG_generic_spi_display, "SPI command transmit failed: %s", esp_err_to_name(ret));
    }
}

static void spi_write_data(spi_device_handle_t spi, uint8_t *data, size_t len) {
    esp_err_t ret;
    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = len * 8;
    t.tx_buffer = data;
    t.user = (void*)1;  // D/C = 1 for data
    ret = spi_device_polling_transmit(spi, &t);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG_generic_spi_display, "SPI data transmit failed: %s", esp_err_to_name(ret));
    }
}

esp_err_t generic_spi_display_init(void) {
    ESP_LOGI(TAG_generic_spi_display, "Generic SPI display interface initialized");
    // SPI devices are initialized by gc9a01 component
    return ESP_OK;
}

void generic_spi_display_act(void) {
    // Generic display interface is passive - drawing handled by specific display components
    // ESP_LOGD(TAG_generic_spi_display, "generic_spi_display act");
}

// Utility functions that can be called by other components
void generic_display_fill_rect(spi_device_handle_t spi, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
    if (!spi) return;

    // Set column address
    spi_write_command(spi, 0x2A);
    uint8_t col_data[] = {x >> 8, x & 0xFF, (x + w - 1) >> 8, (x + w - 1) & 0xFF};
    spi_write_data(spi, col_data, 4);

    // Set row address
    spi_write_command(spi, 0x2B);
    uint8_t row_data[] = {y >> 8, y & 0xFF, (y + h - 1) >> 8, (y + h - 1) & 0xFF};
    spi_write_data(spi, row_data, 4);

    // Memory write
    spi_write_command(spi, 0x2C);

    // Send pixel data
    uint8_t pixel_data[2];
    pixel_data[0] = color >> 8;    // High byte
    pixel_data[1] = color & 0xFF;  // Low byte

    for (uint32_t i = 0; i < w * h; i++) {
        spi_write_data(spi, pixel_data, 2);
    }
}

void generic_display_draw_pixel(spi_device_handle_t spi, uint16_t x, uint16_t y, uint16_t color) {
    generic_display_fill_rect(spi, x, y, 1, 1, color);
}



