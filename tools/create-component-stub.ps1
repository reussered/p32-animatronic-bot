# Create Component Stub - Generates logging-only component implementation
# Usage: .\tools\create-component-stub.ps1 -ComponentName "left_eye" -Description "Left eye display" -HitCount 60000

param(
    [Parameter(Mandatory=$true)]
    [string]$ComponentName,
    
    [Parameter(Mandatory=$true)]
    [string]$Description,
    
    [Parameter(Mandatory=$false)]
    [int]$HitCount = 60000,  # Default: 2 Hz (readable scrolling)
    
    [Parameter(Mandatory=$false)]
    [string]$OutputDir = "src\components"
)

$ErrorActionPreference = "Stop"

# Validate component name (must be valid C identifier)
if ($ComponentName -notmatch '^[a-z][a-z0-9_]*$') {
    Write-Error "Component name must be lowercase alphanumeric with underscores (e.g., 'left_eye')"
    exit 1
}

# Create output directory if needed
$fullOutputDir = Join-Path $PSScriptRoot "..\$OutputDir"
if (-not (Test-Path $fullOutputDir)) {
    New-Item -ItemType Directory -Path $fullOutputDir -Force | Out-Null
}

# Generate C source file
$cFilePath = Join-Path $fullOutputDir "${ComponentName}.c"

$cContent = @"
// $Description - STUB IMPLEMENTATION
// Auto-generated by create-component-stub.ps1
// Replace this stub with real hardware implementation

#include <esp_log.h>
#include <esp_err.h>

static const char* TAG = "$ComponentName";

// Init function: NO ARGUMENTS
esp_err_t ${ComponentName}_init(void)
{
    ESP_LOGI(TAG, "[$ComponentName] INIT - $Description");
    
    // TODO: Initialize hardware here
    // Example: Configure GPIO, SPI, I2C, etc.
    
    return ESP_OK;
}

// Act function: NO ARGUMENTS
void ${ComponentName}_act(void)
{
    // This stub just logs - replace with real implementation
    ESP_LOGI(TAG, "[$ComponentName] ACT - $Description");
    
    // TODO: Replace with real component logic
    // Example: Read sensor, update display, drive servo, etc.
}
"@

Write-Output $cContent | Out-File -FilePath $cFilePath -Encoding ASCII -NoNewline

Write-Host "Created C stub: $cFilePath" -ForegroundColor Green

$periodSeconds = 1.0 * $HitCount / 120000.0
$frequencyHz = [math]::Round(120000.0 / $HitCount, 2)

Write-Host "  hitCount: $HitCount ($periodSeconds seconds between executions)" -ForegroundColor Cyan
Write-Host "  Frequency: $frequencyHz Hz" -ForegroundColor Cyan

# Show next steps
Write-Host ""
Write-Host "Next steps:" -ForegroundColor Yellow
Write-Host "1. Add component to JSON config with hitCount: $HitCount"
Write-Host "2. Run generate_tables.py to regenerate component tables"
Write-Host "3. Rebuild firmware: pio run"
Write-Host "4. Upload firmware: pio run -t upload"
Write-Host "5. Monitor: pio device monitor"
Write-Host "6. Implement real hardware logic in $cFilePath"
